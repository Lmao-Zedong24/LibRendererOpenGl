#version 330 core

out vec4 FragColor;

in vec3 Pos;
in vec3 Nor;
in vec2 UV;

uniform vec3 camPos;
uniform vec3 lightPos;
uniform vec3 lightCom;

uniform sampler2D ourTexture;

vec4 blinnPhong()
{
	vec3 lightDir = normalize(lightPos - Pos);
	float squaredDist = pow(length(lightPos - Pos),2);

	float lambertian = max(dot(lightDir, Nor), 0.f);
	float specular = 0.f;

	if (lambertian < 0.f)
	{
		vec3 viewDir = normalize(camPos - Pos);
		vec3 halfDir = normalize(lightDir + viewDir);
		float specularAngle = max(dot(halfDir, Nor), 0.f);

		specular = pow(specularAngle, 10);
	}

	vec4 colorT = texture(ourTexture, UV);

	vec4 ambientColor = colorT * lightCom.x;
	vec4 diffuseColor = colorT * lightCom.y;
	vec4 specularColor = colorT * lightCom.z;

	vec4 color = ambientColor
		+ diffuseColor * lambertian * 1 / squaredDist
		+ specularColor * specular * 1 / squaredDist;

	return color;
}

void main()
{
	FragColor = texture(ourTexture, UV);
	//FragColor = blinnPhong();
}