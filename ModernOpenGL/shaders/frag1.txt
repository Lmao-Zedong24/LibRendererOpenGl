#version 330

in vec4 vectorColor;
in vec2 UV;
in vec3 Normal;
in vec3 FragPos;

out vec4 color;

struct Light
{
	vec3 color;
	float aIntensity;
	float dIntensity;
};

struct DirectionalLight
{
	Light base;
	vec3 direction;
};

struct PointLight
{
	Light base;
	vec3 position;
	float constant;
	float linear;
	float exponent;
};

struct Material
{
	float sIntensity;
	float shininess;
};

uniform int pointLightCount;

uniform DirectionalLight directionalLight;
uniform PointLight pointLights[10];

uniform sampler2D outTexture;
uniform Material material;

uniform vec3 camPosition;

vec4 CalcLightDirection(Light baseLight, vec3 direction)
{
	vec4 aColor = vec4 (baseLight.color, 1.0f)* baseLight.aIntensity;
	
	float diffuseFactor = max(dot(normalize(Normal), normalize(direction)), 0.0f);
	vec4 dColor = vec4 (baseLight.color, 1.0f) * baseLight.dIntensity * diffuseFactor;
	
	vec3 meshToCam = normalize(camPosition - FragPos);
	vec3 reflectedVertex = normalize(reflect(direction, normalize(Normal)));
	float specularFactor = pow(dot(meshToCam, reflectedVertex), material.shininess);
	vec4 sColor = vec4(baseLight.color * material.sIntensity * specularFactor, 1.0f);
	
	return (aColor + dColor + sColor);
}

vec4 CalcDirectionalLight()
{
	return CalcLightDirection(directionalLight.base, directionalLight.direction);
}

vec4 CalcPointLight()
{
	vec4 totalColor = vec4 (0,0,0,0);
	
	for(int i = 0; i <pointLightCount; i++)
	{
		vec3 direction = FragPos - pointLights[i].position;
		float distance = length(direction);
		direction = normalize(direction);
		
		vec4 color = CalcLightDirection(pointLights[i].base, direction);
		float attenuation = pointLights[i].exponent * distance * distance + pointLights[i].linear * distance
						+ pointLights[i].constant;
						
		totalColor += (color/attenuation);
	}
	return totalColor;
}

void main()
{
	vec4 finalColor = CalcDirectionalLight();
	color = texture(outTexture, UV) * finalColor;
}